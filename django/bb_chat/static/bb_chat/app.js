// Generated by CoffeeScript 1.9.3
(function() {
  var Conversation, ConversationView, Conversations, ConversationsView, MessagesView, Router,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Conversation = (function(superClass) {
    extend(Conversation, superClass);

    function Conversation() {
      return Conversation.__super__.constructor.apply(this, arguments);
    }

    Conversation.prototype.urlRoot = '/bb/conversations';

    Conversation.prototype.getViewUrl = function() {
      return '/bb/c/' + this.get('id') + '/';
    };

    return Conversation;

  })(Backbone.Model);

  Conversations = (function(superClass) {
    extend(Conversations, superClass);

    function Conversations() {
      return Conversations.__super__.constructor.apply(this, arguments);
    }

    Conversations.prototype.model = Conversation;

    Conversations.prototype.url = '/bb/conversations';

    return Conversations;

  })(Backbone.Collection);

  ConversationView = (function(superClass) {
    extend(ConversationView, superClass);

    function ConversationView() {
      return ConversationView.__super__.constructor.apply(this, arguments);
    }

    ConversationView.prototype.tagName = 'div';

    ConversationView.prototype.className = 'conversation';

    ConversationView.prototype.template = _.template($('#conversation-view').html());

    ConversationView.prototype.render = function() {
      this.$el.html(this.template());
      return this;
    };

    return ConversationView;

  })(Backbone.View);

  ConversationsView = (function(superClass) {
    extend(ConversationsView, superClass);

    function ConversationsView() {
      return ConversationsView.__super__.constructor.apply(this, arguments);
    }

    ConversationsView.prototype.el = '.navigation';

    ConversationsView.prototype.template = _.template($('#navigation-view').html());

    ConversationsView.prototype.initialize = function() {
      _.bindAll(this('render'));
      this.collection = new Conversations();
      this.collection.bind('update', this.render);
      return this.collection.fetch();
    };

    ConversationsView.prototype.render = function() {
      this.$el.html(this.template({
        conversations: this.collection
      }));
      return this;
    };

    return ConversationsView;

  })(Backbone.View);

  MessagesView = (function(superClass) {
    extend(MessagesView, superClass);

    function MessagesView() {
      return MessagesView.__super__.constructor.apply(this, arguments);
    }

    MessagesView.prototype.tagName = 'div';

    MessagesView.prototype.className = 'messages';

    MessagesView.prototype.template = _.template($('#messages-view').html());

    MessagesView.prototype.initialize = function() {
      _.bindAll(this('render'));
      this.model.bind('update', this.render);
      return this.render();
    };

    MessagesView.prototype.render = function() {
      this.$el.html(this.template({
        conversation: this.model
      }));
      console.log(this.$el.html());
      return this;
    };

    return MessagesView;

  })(Backbone.View);

  Router = (function(superClass) {
    extend(Router, superClass);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      'c/:id/': 'conversation'
    };

    Router.prototype.initialize = function() {
      return $(document).on('click', 'a[href]', function(e) {
        var href, root;
        href = this.getAttribute('href');
        root = Backbone.history.root;
        if (href.startsWith(root)) {
          e.preventDefault();
          return Backbone.history.navigate(href.substr(root.length), true);
        }
      });
    };

    Router.prototype.conversation = function(id) {
      var conversation, view;
      conversation = new Conversation({
        id: id
      });
      window.c = conversation;
      conversation.fetch();
      view = new MessagesView({
        model: conversation
      });
      return $('.main').html(view.$el);
    };

    return Router;

  })(Backbone.Router);

  $(function() {
    var conversationsView, router;
    conversationsView = new ConversationsView();
    router = new Router();
    Backbone.history.start({
      pushState: true,
      root: '/bb/'
    });
    window.router = router;
    return window.conversationsView = conversationsView;
  });

}).call(this);
